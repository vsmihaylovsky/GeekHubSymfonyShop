<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Product;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\Expr\Join;

/**
 * ReviewRepository
 *
 * This class was generated by the PhpStorm "Php Annotations" Plugin. Add your own custom
 * repository methods below.
 */
class ReviewRepository extends EntityRepository
{
    /**
     * @param $slug
     * @return array
     */
    public function getProductReviewsQuery($slug)
    {
        return $this->createQueryBuilder('r')
            ->select('r, u')
            ->innerJoin('r.product', 'p', Join::WITH, 'p.slug = :slug')
            ->innerJoin('r.user', 'u')
            ->orderBy('r.createdAt', 'DESC')
            ->setParameters(['slug' => $slug])
            ->getQuery();
    }

    /**
     * @param Product $product
     * @return mixed
     */
    public function getProductReviewsCount(Product $product)
    {
        return $this->createQueryBuilder('r')
            ->select('count(r.id)')
            ->where('r.product = :product')
            ->setParameters(['product' => $product])
            ->getQuery()
            ->getSingleScalarResult();
    }

    /**
     * @param Product $product
     * @return mixed
     */
    public function getProductRating(Product $product)
    {
        return $this->createQueryBuilder('r')
            ->select('avg(r.rating)')
            ->where('r.product = :product')
            ->setParameters(['product' => $product])
            ->getQuery()
            ->getSingleScalarResult();
    }

    /**
     * @param $search
     * @return \Doctrine\ORM\Query
     */
    public function getAllQuery($search)
    {
        return $this->createQueryBuilder('r')
            ->select('r, p, u')
            ->innerJoin('r.product', 'p')
            ->innerJoin('r.user', 'u')
            ->where('r.reviewText like :review_text or p.name like :product_name or u.username like :username')
            ->setParameters(['review_text' => "%$search%", 'product_name' => "%$search%", 'username' => "%$search%"])
            ->getQuery();
    }
}
